{"ast":null,"code":"var _jsxFileName = \"/Users/joshuacolvin/Desktop/Development/meal-db/src/router/components/meals/index.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { filterID } from '../../../app_state/action_creators/filterActions.jsx';\nimport { RecipeCard } from '../../../static_components';\n\nconst Meal = ({\n  filterID,\n  match: {\n    params: {\n      mealID\n    }\n  },\n  meal\n}) => {\n  _s();\n\n  // Initialize state\n  let [isLoading, setLoadingState] = useState(true);\n  let [_meal, setMeal] = useState({}); // Hadle fetch request\n\n  useEffect(() => {\n    fetch(`https://www.themealdb.com/api/json/v1/1/lookup.php?i=${mealID}`).then(response => response.json()).then(data => filterID(data)); // Clean up\n\n    return function () {\n      filterID({\n        meals: undefined\n      });\n    };\n  }, [filterID, mealID]); // Once store has been updated, update local state\n\n  useEffect(() => {\n    if (meal !== undefined) {\n      let i = 1;\n      let formattedStr = \"\";\n      let isEmptyStr;\n      let ingredients = [];\n\n      do {\n        isEmptyStr = meal[`strMeasure${i}`] === \"\" || meal[`strMeasure${i}`] === \" \";\n        formattedStr = meal[`strIngredient${i}`] + (isEmptyStr ? \"\" : ` - ${meal[`strMeasure${i}`]}`);\n        ingredients.push(formattedStr);\n        i++;\n      } while (meal[`strIngredient${i}`] !== \"\" && meal[`strIngredient${i}`] !== null && i <= 20);\n\n      setLoadingState(false);\n      setMeal({\n        strMeal: meal[\"strMeal\"],\n        strCategory: meal[\"strCategory\"],\n        strArea: meal[\"strArea\"],\n        strInstructions: meal[\"strInstructions\"],\n        strMealThumb: meal[\"strMealThumb\"],\n        strTags: meal[\"strTags\"],\n        strYoutube: meal[\"strYoutube\"],\n        strIngredients: [...ingredients],\n        strSource: meal[\"strSource\"]\n      });\n    }\n\n    console.log(_meal);\n  }, [meal, _meal]);\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 3\n    }\n  }, isLoading ? /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 5\n    }\n  }, \"Loading...\") : /*#__PURE__*/React.createElement(RecipeCard, Object.assign({}, _meal, {\n    btnText: \"Home\",\n    btnPath: \"/Home\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 5\n    }\n  })));\n};\n\n_s(Meal, \"mHfIZBEg2QgPlDgrHCoIQtJWSb0=\");\n\n_c = Meal;\n\nconst mapStateToProps = state => {\n  return {\n    meal: state.filterMealsReducer[0]\n  };\n};\n\nexport default connect(mapStateToProps, {\n  filterID\n})(Meal);\n\nvar _c;\n\n$RefreshReg$(_c, \"Meal\");","map":{"version":3,"sources":["/Users/joshuacolvin/Desktop/Development/meal-db/src/router/components/meals/index.jsx"],"names":["React","useState","useEffect","connect","filterID","RecipeCard","Meal","match","params","mealID","meal","isLoading","setLoadingState","_meal","setMeal","fetch","then","response","json","data","meals","undefined","i","formattedStr","isEmptyStr","ingredients","push","strMeal","strCategory","strArea","strInstructions","strMealThumb","strTags","strYoutube","strIngredients","strSource","console","log","mapStateToProps","state","filterMealsReducer"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\n\nimport { connect } from 'react-redux';\nimport { filterID } from '../../../app_state/action_creators/filterActions.jsx';\n\nimport { RecipeCard } from '../../../static_components';\n\nconst Meal = ({ filterID, match:{params:{mealID}}, meal }) => {\n\t// Initialize state\n\tlet [isLoading, setLoadingState] = useState(true);\n\tlet [_meal,setMeal] = useState({});\n\n\t// Hadle fetch request\n\tuseEffect(() => {\n\t\tfetch(`https://www.themealdb.com/api/json/v1/1/lookup.php?i=${mealID}`)\n\t\t\t.then(response => response.json())\n\t\t\t.then(data => filterID(data));\n\n\t\t// Clean up\n\t\treturn function () {\n\t\t\tfilterID({meals:undefined})\n\t\t}\n\t},[filterID,mealID])\n\t// Once store has been updated, update local state\n\tuseEffect(() => {\n\t\tif (meal !== undefined) {\n\t\t\tlet i = 1;\n\t\t\tlet formattedStr = \"\";\n\t\t\tlet isEmptyStr;\n\t\t\tlet ingredients = [];\n\t\t\tdo {\n\t\t\t\tisEmptyStr = (meal[`strMeasure${i}`] === \"\") || (meal[`strMeasure${i}`] === \" \");\n\t\t\t\tformattedStr = meal[`strIngredient${i}`] + (isEmptyStr ? \"\" : ` - ${meal[`strMeasure${i}`]}`);\n\t\t\t\tingredients.push(formattedStr);\n\t\t\t\ti++;\n\t\t\t} while((meal[`strIngredient${i}`] !== \"\") && (meal[`strIngredient${i}`] !== null) && (i <= 20));\n\n\t\t\tsetLoadingState(false);\n\t\t\tsetMeal({\n\t\t\t\tstrMeal: meal[\"strMeal\"],\n\t\t\t\tstrCategory: meal[\"strCategory\"],\n\t\t\t\tstrArea: meal[\"strArea\"],\n\t\t\t\tstrInstructions: meal[\"strInstructions\"],\n\t\t\t\tstrMealThumb: meal[\"strMealThumb\"],\n\t\t\t\tstrTags: meal[\"strTags\"],\n\t\t\t\tstrYoutube: meal[\"strYoutube\"],\n\t\t\t\tstrIngredients: [...ingredients],\n\t\t\t\tstrSource: meal[\"strSource\"]\n\t\t\t})\n\t\t}\n\t\tconsole.log(_meal);\n\t},[meal,_meal])\n\n\treturn (\n\t\t<React.Fragment>\n\t\t{\n\t\t\tisLoading ?\n\t\t\t\t<h2>Loading...</h2> :\n\t\t\t\t<RecipeCard {..._meal} btnText=\"Home\" btnPath=\"/Home\" />\n\t\t} \n\t\t</React.Fragment>\n\t)\n}\n\nconst mapStateToProps = (state) => {\n\treturn { meal: state.filterMealsReducer[0] }\n}\n\nexport default connect(\n\tmapStateToProps,\n\t{ filterID }\n)(Meal)"]},"metadata":{},"sourceType":"module"}